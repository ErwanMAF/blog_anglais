/*! Magnific Popup - v0.9.9 - 2014-09-06
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2014 Dmitry Semenov; */
(function($) {
    var mfp;
    var _prevStatus;
    var _body;
    var _document;
    var _prevContentType;
    var mask;
    var openElement;
    var CLOSE_EVENT = "Close";
    var BEFORE_CLOSE_EVENT = "BeforeClose";
    var AFTER_CLOSE_EVENT = "AfterClose";
    var BEFORE_APPEND_EVENT = "BeforeAppend";
    var MARKUP_PARSE_EVENT = "MarkupParse";
    var OPEN_EVENT = "Open";
    var CHANGE_EVENT = "Change";
    var NS = "mfp";
    var EVENT_NS = "." + NS;
    var READY_CLASS = "mfp-ready";
    var REMOVING_CLASS = "mfp-removing";
    var PREVENT_CLOSE_CLASS = "mfp-prevent-close";
    var MagnificPopup = function() {
    };
    var _isJQ = !!window.jQuery;
    var _window = $(window);
    var _mfpOn = function(name, f) {
      mfp.ev.on(NS + name + EVENT_NS, f);
    };
    var _getEl = function(className, id, recurring, dataAndEvents) {
      var el = document.createElement("div");
      return el.className = "mfp-" + className, recurring && (el.innerHTML = recurring), dataAndEvents ? id && id.appendChild(el) : (el = $(el), id && el.appendTo(id)), el;
    };
    var _mfpTrigger = function(e, data) {
      mfp.ev.triggerHandler(NS + e, data);
      if (mfp.st.callbacks) {
        e = e.charAt(0).toLowerCase() + e.slice(1);
        if (mfp.st.callbacks[e]) {
          mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
        }
      }
    };
    var _getCloseBtn = function(element) {
      return element === openElement && mfp.currTemplate.closeBtn || (mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace("%title%", mfp.st.tClose)), openElement = element), mfp.currTemplate.closeBtn;
    };
    var _checkInstance = function() {
      if (!$.magnificPopup.instance) {
        mfp = new MagnificPopup;
        mfp.init();
        $.magnificPopup.instance = mfp;
      }
    };
    var supportsTransitions = function() {
      var s = document.createElement("p").style;
      var v = ["ms", "O", "Moz", "Webkit"];
      if (void 0 !== s.transition) {
        return true;
      }
      for (;v.length;) {
        if (v.pop() + "Transition" in s) {
          return true;
        }
      }
      return false;
    };
    MagnificPopup.prototype = {
      constructor : MagnificPopup,
      init : function() {
        var appVersion = navigator.appVersion;
        mfp.isIE7 = -1 !== appVersion.indexOf("MSIE 7.");
        mfp.isIE8 = -1 !== appVersion.indexOf("MSIE 8.");
        mfp.isLowIE = mfp.isIE7 || mfp.isIE8;
        mfp.isAndroid = /android/gi.test(appVersion);
        mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
        mfp.supportsTransition = supportsTransitions();
        mfp.probablyMobile = mfp.isAndroid || (mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent));
        _document = $(document);
        mfp.popupsCache = {};
      },
      open : function(data) {
        if (!_body) {
          _body = $(document.body);
        }
        var i;
        if (data.isObj === false) {
          mfp.items = data.items.toArray();
          mfp.index = 0;
          var item;
          var items = data.items;
          i = 0;
          for (;items.length > i;i++) {
            if (item = items[i], item.parsed && (item = item.el[0]), item === data.el[0]) {
              mfp.index = i;
              break;
            }
          }
        } else {
          mfp.items = $.isArray(data.items) ? data.items : [data.items];
          mfp.index = data.index || 0;
        }
        if (mfp.isOpen) {
          return mfp.updateItemHTML(), void 0;
        }
        mfp.types = [];
        mask = "";
        mfp.ev = data.mainEl && data.mainEl.length ? data.mainEl.eq(0) : _document;
        if (data.key) {
          if (!mfp.popupsCache[data.key]) {
            mfp.popupsCache[data.key] = {};
          }
          mfp.currTemplate = mfp.popupsCache[data.key];
        } else {
          mfp.currTemplate = {};
        }
        mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
        mfp.fixedContentPos = "auto" === mfp.st.fixedContentPos ? !mfp.probablyMobile : mfp.st.fixedContentPos;
        if (mfp.st.modal) {
          mfp.st.closeOnContentClick = false;
          mfp.st.closeOnBgClick = false;
          mfp.st.showCloseBtn = false;
          mfp.st.enableEscapeKey = false;
        }
        if (!mfp.bgOverlay) {
          mfp.bgOverlay = _getEl("bg").on("click" + EVENT_NS, function() {
            mfp.close();
          });
          mfp.wrap = _getEl("wrap").attr("tabindex", -1).on("click" + EVENT_NS, function(e) {
            if (mfp._checkIfClose(e.target)) {
              mfp.close();
            }
          });
          mfp.container = _getEl("container", mfp.wrap);
        }
        mfp.contentContainer = _getEl("content");
        if (mfp.st.preloader) {
          mfp.preloader = _getEl("preloader", mfp.container, mfp.st.tLoading);
        }
        var comparisons = $.magnificPopup.modules;
        i = 0;
        for (;comparisons.length > i;i++) {
          var t = comparisons[i];
          t = t.charAt(0).toUpperCase() + t.slice(1);
          mfp["init" + t].call(mfp);
        }
        _mfpTrigger("BeforeOpen");
        if (mfp.st.showCloseBtn) {
          if (mfp.st.closeBtnInside) {
            _mfpOn(MARKUP_PARSE_EVENT, function(dataAndEvents, deepDataAndEvents, values, item) {
              values.close_replaceWith = _getCloseBtn(item.type);
            });
            mask += " mfp-close-btn-in";
          } else {
            mfp.wrap.append(_getCloseBtn());
          }
        }
        if (mfp.st.alignTop) {
          mask += " mfp-align-top";
        }
        if (mfp.fixedContentPos) {
          mfp.wrap.css({
            overflow : mfp.st.overflowY,
            overflowX : "hidden",
            overflowY : mfp.st.overflowY
          });
        } else {
          mfp.wrap.css({
            top : _window.scrollTop(),
            position : "absolute"
          });
        }
        if (mfp.st.fixedBgPos === false || "auto" === mfp.st.fixedBgPos && !mfp.fixedContentPos) {
          mfp.bgOverlay.css({
            height : _document.height(),
            position : "absolute"
          });
        }
        if (mfp.st.enableEscapeKey) {
          _document.on("keyup" + EVENT_NS, function(event) {
            if (27 === event.keyCode) {
              mfp.close();
            }
          });
        }
        _window.on("resize" + EVENT_NS, function() {
          mfp.updateSize();
        });
        if (!mfp.st.closeOnContentClick) {
          mask += " mfp-auto-cursor";
        }
        if (mask) {
          mfp.wrap.addClass(mask);
        }
        var windowHeight = mfp.wH = _window.height();
        var windowStyles = {};
        if (mfp.fixedContentPos && mfp._hasScrollBar(windowHeight)) {
          var s = mfp._getScrollbarSize();
          if (s) {
            windowStyles.marginRight = s;
          }
        }
        if (mfp.fixedContentPos) {
          if (mfp.isIE7) {
            $("body, html").css("overflow", "hidden");
          } else {
            windowStyles.overflow = "hidden";
          }
        }
        var classesToadd = mfp.st.mainClass;
        return mfp.isIE7 && (classesToadd += " mfp-ie7"), classesToadd && mfp._addClassToMFP(classesToadd), mfp.updateItemHTML(), _mfpTrigger("BuildControls"), $("html").css(windowStyles), mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || _body), mfp._lastFocusedEl = document.activeElement, setTimeout(function() {
          if (mfp.content) {
            mfp._addClassToMFP(READY_CLASS);
            mfp._setFocus();
          } else {
            mfp.bgOverlay.addClass(READY_CLASS);
          }
          _document.on("focusin" + EVENT_NS, mfp._onFocusIn);
        }, 16), mfp.isOpen = true, mfp.updateSize(windowHeight), _mfpTrigger(OPEN_EVENT), data;
      },
      close : function() {
        if (mfp.isOpen) {
          _mfpTrigger(BEFORE_CLOSE_EVENT);
          mfp.isOpen = false;
          if (mfp.st.removalDelay && (!mfp.isLowIE && mfp.supportsTransition)) {
            mfp._addClassToMFP(REMOVING_CLASS);
            setTimeout(function() {
              mfp._close();
            }, mfp.st.removalDelay);
          } else {
            mfp._close();
          }
        }
      },
      _close : function() {
        _mfpTrigger(CLOSE_EVENT);
        var classesToRemove = REMOVING_CLASS + " " + READY_CLASS + " ";
        if (mfp.bgOverlay.detach(), mfp.wrap.detach(), mfp.container.empty(), mfp.st.mainClass && (classesToRemove += mfp.st.mainClass + " "), mfp._removeClassFromMFP(classesToRemove), mfp.fixedContentPos) {
          var windowStyles = {
            marginRight : ""
          };
          if (mfp.isIE7) {
            $("body, html").css("overflow", "");
          } else {
            windowStyles.overflow = "";
          }
          $("html").css(windowStyles);
        }
        _document.off("keyup" + EVENT_NS + " focusin" + EVENT_NS);
        mfp.ev.off(EVENT_NS);
        mfp.wrap.attr("class", "mfp-wrap").removeAttr("style");
        mfp.bgOverlay.attr("class", "mfp-bg");
        mfp.container.attr("class", "mfp-container");
        if (!!mfp.st.showCloseBtn) {
          if (!(mfp.st.closeBtnInside && mfp.currTemplate[mfp.currItem.type] !== true)) {
            if (mfp.currTemplate.closeBtn) {
              mfp.currTemplate.closeBtn.detach();
            }
          }
        }
        if (mfp._lastFocusedEl) {
          $(mfp._lastFocusedEl).focus();
        }
        mfp.currItem = null;
        mfp.content = null;
        mfp.currTemplate = null;
        mfp.prevHeight = 0;
        _mfpTrigger(AFTER_CLOSE_EVENT);
      },
      updateSize : function(winHeight) {
        if (mfp.isIOS) {
          var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
          var height = window.innerHeight * zoomLevel;
          mfp.wrap.css("height", height);
          mfp.wH = height;
        } else {
          mfp.wH = winHeight || _window.height();
        }
        if (!mfp.fixedContentPos) {
          mfp.wrap.css("height", mfp.wH);
        }
        _mfpTrigger("Resize");
      },
      updateItemHTML : function() {
        var item = mfp.items[mfp.index];
        mfp.contentContainer.detach();
        if (mfp.content) {
          mfp.content.detach();
        }
        if (!item.parsed) {
          item = mfp.parseEl(mfp.index);
        }
        var type = item.type;
        if (_mfpTrigger("BeforeChange", [mfp.currItem ? mfp.currItem.type : "", type]), mfp.currItem = item, !mfp.currTemplate[type]) {
          var page = mfp.st[type] ? mfp.st[type].markup : false;
          _mfpTrigger("FirstMarkupParse", page);
          mfp.currTemplate[type] = page ? $(page) : true;
        }
        if (_prevContentType) {
          if (_prevContentType !== item.type) {
            mfp.container.removeClass("mfp-" + _prevContentType + "-holder");
          }
        }
        var newContent = mfp["get" + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
        mfp.appendContent(newContent, type);
        item.preloaded = true;
        _mfpTrigger(CHANGE_EVENT, item);
        _prevContentType = item.type;
        mfp.container.prepend(mfp.contentContainer);
        _mfpTrigger("AfterChange");
      },
      appendContent : function(newContent, type) {
        mfp.content = newContent;
        if (newContent) {
          if (mfp.st.showCloseBtn && (mfp.st.closeBtnInside && mfp.currTemplate[type] === true)) {
            if (!mfp.content.find(".mfp-close").length) {
              mfp.content.append(_getCloseBtn());
            }
          } else {
            mfp.content = newContent;
          }
        } else {
          mfp.content = "";
        }
        _mfpTrigger(BEFORE_APPEND_EVENT);
        mfp.container.addClass("mfp-" + type + "-holder");
        mfp.contentContainer.append(mfp.content);
      },
      parseEl : function(index) {
        var type;
        var item = mfp.items[index];
        if (item.tagName ? item = {
          el : $(item)
        } : (type = item.type, item = {
          data : item,
          src : item.src
        }), item.el) {
          var types = mfp.types;
          var i = 0;
          for (;types.length > i;i++) {
            if (item.el.hasClass("mfp-" + types[i])) {
              type = types[i];
              break;
            }
          }
          item.src = item.el.attr("data-mfp-src");
          if (!item.src) {
            item.src = item.el.attr("href");
          }
        }
        return item.type = type || (mfp.st.type || "inline"), item.index = index, item.parsed = true, mfp.items[index] = item, _mfpTrigger("ElementParse", item), mfp.items[index];
      },
      addGroup : function(el, options) {
        var eHandler = function(e) {
          e.mfpEl = this;
          mfp._openClick(e, el, options);
        };
        if (!options) {
          options = {};
        }
        var eventName = "click.magnificPopup";
        options.mainEl = el;
        if (options.items) {
          options.isObj = true;
          el.off(eventName).on(eventName, eHandler);
        } else {
          options.isObj = false;
          if (options.delegate) {
            el.off(eventName).on(eventName, options.delegate, eHandler);
          } else {
            options.items = el;
            el.off(eventName).on(eventName, eHandler);
          }
        }
      },
      _openClick : function(e, el, options) {
        var r = void 0 !== options.midClick ? options.midClick : $.magnificPopup.defaults.midClick;
        if (r || 2 !== e.which && (!e.ctrlKey && !e.metaKey)) {
          var disableOn = void 0 !== options.disableOn ? options.disableOn : $.magnificPopup.defaults.disableOn;
          if (disableOn) {
            if ($.isFunction(disableOn)) {
              if (!disableOn.call(mfp)) {
                return true;
              }
            } else {
              if (disableOn > _window.width()) {
                return true;
              }
            }
          }
          if (e.type) {
            e.preventDefault();
            if (mfp.isOpen) {
              e.stopPropagation();
            }
          }
          options.el = $(e.mfpEl);
          if (options.delegate) {
            options.items = el.find(options.delegate);
          }
          mfp.open(options);
        }
      },
      updateStatus : function(status, text) {
        if (mfp.preloader) {
          if (_prevStatus !== status) {
            mfp.container.removeClass("mfp-s-" + _prevStatus);
          }
          if (!text) {
            if (!("loading" !== status)) {
              text = mfp.st.tLoading;
            }
          }
          var data = {
            status : status,
            text : text
          };
          _mfpTrigger("UpdateStatus", data);
          status = data.status;
          text = data.text;
          mfp.preloader.html(text);
          mfp.preloader.find("a").on("click", function(e) {
            e.stopImmediatePropagation();
          });
          mfp.container.addClass("mfp-s-" + status);
          _prevStatus = status;
        }
      },
      _checkIfClose : function(target) {
        if (!$(target).hasClass(PREVENT_CLOSE_CLASS)) {
          var dw = mfp.st.closeOnContentClick;
          var dh = mfp.st.closeOnBgClick;
          if (dw && dh) {
            return true;
          }
          if (!mfp.content || ($(target).hasClass("mfp-close") || mfp.preloader && target === mfp.preloader[0])) {
            return true;
          }
          if (target === mfp.content[0] || $.contains(mfp.content[0], target)) {
            if (dw) {
              return true;
            }
          } else {
            if (dh && $.contains(document, target)) {
              return true;
            }
          }
          return false;
        }
      },
      _addClassToMFP : function(cName) {
        mfp.bgOverlay.addClass(cName);
        mfp.wrap.addClass(cName);
      },
      _removeClassFromMFP : function(cName) {
        this.bgOverlay.removeClass(cName);
        mfp.wrap.removeClass(cName);
      },
      _hasScrollBar : function(winHeight) {
        return(mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
      },
      _setFocus : function() {
        (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
      },
      _onFocusIn : function(e) {
        return e.target === mfp.wrap[0] || $.contains(mfp.wrap[0], e.target) ? void 0 : (mfp._setFocus(), false);
      },
      _parseMarkup : function(template, values, item) {
        var arr;
        if (item.data) {
          values = $.extend(item.data, values);
        }
        _mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);
        $.each(values, function(key, value) {
          if (void 0 === value || value === false) {
            return true;
          }
          if (arr = key.split("_"), arr.length > 1) {
            var el = template.find(EVENT_NS + "-" + arr[0]);
            if (el.length > 0) {
              var val = arr[1];
              if ("replaceWith" === val) {
                if (el[0] !== value[0]) {
                  el.replaceWith(value);
                }
              } else {
                if ("img" === val) {
                  if (el.is("img")) {
                    el.attr("src", value);
                  } else {
                    el.replaceWith('<img src="' + value + '" class="' + el.attr("class") + '" />');
                  }
                } else {
                  el.attr(arr[1], value);
                }
              }
            }
          } else {
            template.find(EVENT_NS + "-" + key).html(value);
          }
        });
      },
      _getScrollbarSize : function() {
        if (void 0 === mfp.scrollbarSize) {
          var div = document.createElement("div");
          div.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
          document.body.appendChild(div);
          mfp.scrollbarSize = div.offsetWidth - div.clientWidth;
          document.body.removeChild(div);
        }
        return mfp.scrollbarSize;
      }
    };
    $.magnificPopup = {
      instance : null,
      proto : MagnificPopup.prototype,
      modules : [],
      open : function(options, index) {
        return _checkInstance(), options = options ? $.extend(true, {}, options) : {}, options.isObj = true, options.index = index || 0, this.instance.open(options);
      },
      close : function() {
        return $.magnificPopup.instance && $.magnificPopup.instance.close();
      },
      registerModule : function(name, opt_attributes) {
        if (opt_attributes.options) {
          $.magnificPopup.defaults[name] = opt_attributes.options;
        }
        $.extend(this.proto, opt_attributes.proto);
        this.modules.push(name);
      },
      defaults : {
        disableOn : 0,
        key : null,
        midClick : false,
        mainClass : "",
        preloader : true,
        focus : "",
        closeOnContentClick : false,
        closeOnBgClick : true,
        closeBtnInside : true,
        showCloseBtn : true,
        enableEscapeKey : true,
        modal : false,
        alignTop : false,
        removalDelay : 0,
        prependTo : null,
        fixedContentPos : "auto",
        fixedBgPos : "auto",
        overflowY : "auto",
        closeMarkup : '<button title="%title%" type="button" class="mfp-close">&times;</button>',
        tClose : "Close (Esc)",
        tLoading : "Loading..."
      }
    };
    $.fn.magnificPopup = function(options) {
      _checkInstance();
      var jqEl = $(this);
      if ("string" == typeof options) {
        if ("open" === options) {
          var items;
          var itemOpts = _isJQ ? jqEl.data("magnificPopup") : jqEl[0].magnificPopup;
          var index = parseInt(arguments[1], 10) || 0;
          if (itemOpts.items) {
            items = itemOpts.items[index];
          } else {
            items = jqEl;
            if (itemOpts.delegate) {
              items = items.find(itemOpts.delegate);
            }
            items = items.eq(index);
          }
          mfp._openClick({
            mfpEl : items
          }, jqEl, itemOpts);
        } else {
          if (mfp.isOpen) {
            mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
          }
        }
      } else {
        options = $.extend(true, {}, options);
        if (_isJQ) {
          jqEl.data("magnificPopup", options);
        } else {
          jqEl[0].magnificPopup = options;
        }
        mfp.addGroup(jqEl, options);
      }
      return jqEl;
    };
    var _hiddenClass;
    var _inlinePlaceholder;
    var _lastInlineElement;
    var INLINE_NS = "inline";
    var _putInlineElementsBack = function() {
      if (_lastInlineElement) {
        _inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
        _lastInlineElement = null;
      }
    };
    $.magnificPopup.registerModule(INLINE_NS, {
      options : {
        hiddenClass : "hide",
        markup : "",
        tNotFound : "Content not found"
      },
      proto : {
        initInline : function() {
          mfp.types.push(INLINE_NS);
          _mfpOn(CLOSE_EVENT + "." + INLINE_NS, function() {
            _putInlineElementsBack();
          });
        },
        getInline : function(item, template) {
          if (_putInlineElementsBack(), item.src) {
            var inlineSt = mfp.st.inline;
            var el = $(item.src);
            if (el.length) {
              var tbody = el[0].parentNode;
              if (tbody) {
                if (tbody.tagName) {
                  if (!_inlinePlaceholder) {
                    _hiddenClass = inlineSt.hiddenClass;
                    _inlinePlaceholder = _getEl(_hiddenClass);
                    _hiddenClass = "mfp-" + _hiddenClass;
                  }
                  _lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
                }
              }
              mfp.updateStatus("ready");
            } else {
              mfp.updateStatus("error", inlineSt.tNotFound);
              el = $("<div>");
            }
            return item.inlineElement = el, el;
          }
          return mfp.updateStatus("ready"), mfp._parseMarkup(template, {}, item), template;
        }
      }
    });
    var _ajaxCur;
    var AJAX_NS = "ajax";
    var _removeAjaxCursor = function() {
      if (_ajaxCur) {
        _body.removeClass(_ajaxCur);
      }
    };
    var _destroyAjaxRequest = function() {
      _removeAjaxCursor();
      if (mfp.req) {
        mfp.req.abort();
      }
    };
    $.magnificPopup.registerModule(AJAX_NS, {
      options : {
        settings : null,
        cursor : "mfp-ajax-cur",
        tError : '<a href="%url%">The content</a> could not be loaded.'
      },
      proto : {
        initAjax : function() {
          mfp.types.push(AJAX_NS);
          _ajaxCur = mfp.st.ajax.cursor;
          _mfpOn(CLOSE_EVENT + "." + AJAX_NS, _destroyAjaxRequest);
          _mfpOn("BeforeChange." + AJAX_NS, _destroyAjaxRequest);
        },
        getAjax : function(item) {
          if (_ajaxCur) {
            _body.addClass(_ajaxCur);
          }
          mfp.updateStatus("loading");
          var opts = $.extend({
            url : item.src,
            success : function(products, textStatus, jqXHR) {
              var temp = {
                data : products,
                xhr : jqXHR
              };
              _mfpTrigger("ParseAjax", temp);
              mfp.appendContent($(temp.data), AJAX_NS);
              item.finished = true;
              _removeAjaxCursor();
              mfp._setFocus();
              setTimeout(function() {
                mfp.wrap.addClass(READY_CLASS);
              }, 16);
              mfp.updateStatus("ready");
              _mfpTrigger("AjaxContentAdded");
            },
            error : function() {
              _removeAjaxCursor();
              item.finished = item.loadError = true;
              mfp.updateStatus("error", mfp.st.ajax.tError.replace("%url%", item.src));
            }
          }, mfp.st.ajax.settings);
          return mfp.req = $.ajax(opts), "";
        }
      }
    });
    var id;
    var _getTitle = function(item) {
      if (item.data && void 0 !== item.data.title) {
        return item.data.title;
      }
      var src = mfp.st.image.titleSrc;
      if (src) {
        if ($.isFunction(src)) {
          return src.call(mfp, item);
        }
        if (item.el) {
          return item.el.attr(src) || "";
        }
      }
      return "";
    };
    $.magnificPopup.registerModule("image", {
      options : {
        markup : '<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',
        cursor : "mfp-zoom-out-cur",
        titleSrc : "title",
        verticalFit : true,
        tError : '<a href="%url%">The image</a> could not be loaded.'
      },
      proto : {
        initImage : function() {
          var imgSt = mfp.st.image;
          var ns = ".image";
          mfp.types.push("image");
          _mfpOn(OPEN_EVENT + ns, function() {
            if ("image" === mfp.currItem.type) {
              if (imgSt.cursor) {
                _body.addClass(imgSt.cursor);
              }
            }
          });
          _mfpOn(CLOSE_EVENT + ns, function() {
            if (imgSt.cursor) {
              _body.removeClass(imgSt.cursor);
            }
            _window.off("resize" + EVENT_NS);
          });
          _mfpOn("Resize" + ns, mfp.resizeImage);
          if (mfp.isLowIE) {
            _mfpOn("AfterChange", mfp.resizeImage);
          }
        },
        resizeImage : function() {
          var item = mfp.currItem;
          if (item && (item.img && mfp.st.image.verticalFit)) {
            var decr = 0;
            if (mfp.isLowIE) {
              decr = parseInt(item.img.css("padding-top"), 10) + parseInt(item.img.css("padding-bottom"), 10);
            }
            item.img.css("max-height", mfp.wH - decr);
          }
        },
        _onImageHasSize : function(item) {
          if (item.img) {
            item.hasSize = true;
            if (id) {
              clearInterval(id);
            }
            item.isCheckingImgSize = false;
            _mfpTrigger("ImageHasSize", item);
            if (item.imgHidden) {
              if (mfp.content) {
                mfp.content.removeClass("mfp-loading");
              }
              item.imgHidden = false;
            }
          }
        },
        findImageSize : function(item) {
          var n = 0;
          var img = item.img[0];
          var mfpSetInterval = function(delay) {
            if (id) {
              clearInterval(id);
            }
            id = setInterval(function() {
              return img.naturalWidth > 0 ? (mfp._onImageHasSize(item), void 0) : (n > 200 && clearInterval(id), n++, 3 === n ? mfpSetInterval(10) : 40 === n ? mfpSetInterval(50) : 100 === n && mfpSetInterval(500), void 0);
            }, delay);
          };
          mfpSetInterval(1);
        },
        getImage : function(item, template) {
          var o = 0;
          var onLoadComplete = function() {
            if (item) {
              if (item.img[0].complete) {
                item.img.off(".mfploader");
                if (item === mfp.currItem) {
                  mfp._onImageHasSize(item);
                  mfp.updateStatus("ready");
                }
                item.hasSize = true;
                item.loaded = true;
                _mfpTrigger("ImageLoadComplete");
              } else {
                o++;
                if (200 > o) {
                  setTimeout(onLoadComplete, 100);
                } else {
                  onLoadError();
                }
              }
            }
          };
          var onLoadError = function() {
            if (item) {
              item.img.off(".mfploader");
              if (item === mfp.currItem) {
                mfp._onImageHasSize(item);
                mfp.updateStatus("error", imgSt.tError.replace("%url%", item.src));
              }
              item.hasSize = true;
              item.loaded = true;
              item.loadError = true;
            }
          };
          var imgSt = mfp.st.image;
          var $el = template.find(".mfp-img");
          if ($el.length) {
            var img = document.createElement("img");
            img.className = "mfp-img";
            item.img = $(img).on("load.mfploader", onLoadComplete).on("error.mfploader", onLoadError);
            img.src = item.src;
            if ($el.is("img")) {
              item.img = item.img.clone();
            }
            img = item.img[0];
            if (img.naturalWidth > 0) {
              item.hasSize = true;
            } else {
              if (!img.width) {
                item.hasSize = false;
              }
            }
          }
          return mfp._parseMarkup(template, {
            title : _getTitle(item),
            img_replaceWith : item.img
          }, item), mfp.resizeImage(), item.hasSize ? (id && clearInterval(id), item.loadError ? (template.addClass("mfp-loading"), mfp.updateStatus("error", imgSt.tError.replace("%url%", item.src))) : (template.removeClass("mfp-loading"), mfp.updateStatus("ready")), template) : (mfp.updateStatus("loading"), item.loading = true, item.hasSize || (item.imgHidden = true, template.addClass("mfp-loading"), mfp.findImageSize(item)), template);
        }
      }
    });
    var W;
    var getHasMozTransform = function() {
      return void 0 === W && (W = void 0 !== document.createElement("p").style.MozTransform), W;
    };
    $.magnificPopup.registerModule("zoom", {
      options : {
        enabled : false,
        easing : "ease-in-out",
        duration : 300,
        opener : function(element) {
          return element.is("img") ? element : element.find("img");
        }
      },
      proto : {
        initZoom : function() {
          var image;
          var zoomSt = mfp.st.zoom;
          var ns = ".zoom";
          if (zoomSt.enabled && mfp.supportsTransition) {
            var timer;
            var animatedImg;
            var duration = zoomSt.duration;
            var getElToAnimate = function(image) {
              var newImg = image.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image");
              var transition = "all " + zoomSt.duration / 1E3 + "s " + zoomSt.easing;
              var cssObj = {
                position : "fixed",
                zIndex : 9999,
                left : 0,
                top : 0,
                "-webkit-backface-visibility" : "hidden"
              };
              var t = "transition";
              return cssObj["-webkit-" + t] = cssObj["-moz-" + t] = cssObj["-o-" + t] = cssObj[t] = transition, newImg.css(cssObj), newImg;
            };
            var showMainContent = function() {
              mfp.content.css("visibility", "visible");
            };
            _mfpOn("BuildControls" + ns, function() {
              if (mfp._allowZoom()) {
                if (clearTimeout(timer), mfp.content.css("visibility", "hidden"), image = mfp._getItemToZoom(), !image) {
                  return showMainContent(), void 0;
                }
                animatedImg = getElToAnimate(image);
                animatedImg.css(mfp._getOffset());
                mfp.wrap.append(animatedImg);
                timer = setTimeout(function() {
                  animatedImg.css(mfp._getOffset(true));
                  timer = setTimeout(function() {
                    showMainContent();
                    setTimeout(function() {
                      animatedImg.remove();
                      image = animatedImg = null;
                      _mfpTrigger("ZoomAnimationEnded");
                    }, 16);
                  }, duration);
                }, 16);
              }
            });
            _mfpOn(BEFORE_CLOSE_EVENT + ns, function() {
              if (mfp._allowZoom()) {
                if (clearTimeout(timer), mfp.st.removalDelay = duration, !image) {
                  if (image = mfp._getItemToZoom(), !image) {
                    return;
                  }
                  animatedImg = getElToAnimate(image);
                }
                animatedImg.css(mfp._getOffset(true));
                mfp.wrap.append(animatedImg);
                mfp.content.css("visibility", "hidden");
                setTimeout(function() {
                  animatedImg.css(mfp._getOffset());
                }, 16);
              }
            });
            _mfpOn(CLOSE_EVENT + ns, function() {
              if (mfp._allowZoom()) {
                showMainContent();
                if (animatedImg) {
                  animatedImg.remove();
                }
                image = null;
              }
            });
          }
        },
        _allowZoom : function() {
          return "image" === mfp.currItem.type;
        },
        _getItemToZoom : function() {
          return mfp.currItem.hasSize ? mfp.currItem.img : false;
        },
        _getOffset : function(dataAndEvents) {
          var parent;
          parent = dataAndEvents ? mfp.currItem.img : mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
          var offset = parent.offset();
          var paddingTop = parseInt(parent.css("padding-top"), 10);
          var paddingBottom = parseInt(parent.css("padding-bottom"), 10);
          offset.top -= $(window).scrollTop() - paddingTop;
          var obj = {
            width : parent.width(),
            height : (_isJQ ? parent.innerHeight() : parent[0].offsetHeight) - paddingBottom - paddingTop
          };
          return getHasMozTransform() ? obj["-moz-transform"] = obj.transform = "translate(" + offset.left + "px," + offset.top + "px)" : (obj.left = offset.left, obj.top = offset.top), obj;
        }
      }
    });
    var IFRAME_NS = "iframe";
    var path = "//about:blank";
    var _fixIframeBugs = function(isShowing) {
      if (mfp.currTemplate[IFRAME_NS]) {
        var el = mfp.currTemplate[IFRAME_NS].find("iframe");
        if (el.length) {
          if (!isShowing) {
            el[0].src = path;
          }
          if (mfp.isIE8) {
            el.css("display", isShowing ? "block" : "none");
          }
        }
      }
    };
    $.magnificPopup.registerModule(IFRAME_NS, {
      options : {
        markup : '<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',
        srcAction : "iframe_src",
        patterns : {
          youtube : {
            index : "youtube.com",
            id : "v=",
            src : "//www.youtube.com/embed/%id%?autoplay=1"
          },
          vimeo : {
            index : "vimeo.com/",
            id : "/",
            src : "//player.vimeo.com/video/%id%?autoplay=1"
          },
          gmaps : {
            index : "//maps.google.",
            src : "%id%&output=embed"
          }
        }
      },
      proto : {
        initIframe : function() {
          mfp.types.push(IFRAME_NS);
          _mfpOn("BeforeChange", function(dataAndEvents, prevType, newType) {
            if (prevType !== newType) {
              if (prevType === IFRAME_NS) {
                _fixIframeBugs();
              } else {
                if (newType === IFRAME_NS) {
                  _fixIframeBugs(true);
                }
              }
            }
          });
          _mfpOn(CLOSE_EVENT + "." + IFRAME_NS, function() {
            _fixIframeBugs();
          });
        },
        getIframe : function(item, template) {
          var embedSrc = item.src;
          var iframeSt = mfp.st.iframe;
          $.each(iframeSt.patterns, function() {
            return embedSrc.indexOf(this.index) > -1 ? (this.id && (embedSrc = "string" == typeof this.id ? embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length) : this.id.call(this, embedSrc)), embedSrc = this.src.replace("%id%", embedSrc), false) : void 0;
          });
          var dataObj = {};
          return iframeSt.srcAction && (dataObj[iframeSt.srcAction] = embedSrc), mfp._parseMarkup(template, dataObj, item), mfp.updateStatus("ready"), template;
        }
      }
    });
    var _getLoopedId = function(index) {
      var numSlides = mfp.items.length;
      return index > numSlides - 1 ? index - numSlides : 0 > index ? numSlides + index : index;
    };
    var _replaceCurrTotal = function(text, curr, total) {
      return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
    };
    $.magnificPopup.registerModule("gallery", {
      options : {
        enabled : false,
        arrowMarkup : '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
        preload : [0, 2],
        navigateByImgClick : true,
        arrows : true,
        tPrev : "Previous (Left arrow key)",
        tNext : "Next (Right arrow key)",
        tCounter : "%curr% of %total%"
      },
      proto : {
        initGallery : function() {
          var gSt = mfp.st.gallery;
          var ns = ".mfp-gallery";
          var supportsFastClick = Boolean($.fn.mfpFastClick);
          return mfp.direction = true, gSt && gSt.enabled ? (mask += " mfp-gallery", _mfpOn(OPEN_EVENT + ns, function() {
            if (gSt.navigateByImgClick) {
              mfp.wrap.on("click" + ns, ".mfp-img", function() {
                return mfp.items.length > 1 ? (mfp.next(), false) : void 0;
              });
            }
            _document.on("keydown" + ns, function(event) {
              if (37 === event.keyCode) {
                mfp.prev();
              } else {
                if (39 === event.keyCode) {
                  mfp.next();
                }
              }
            });
          }), _mfpOn("UpdateStatus" + ns, function(dataAndEvents, data) {
            if (data.text) {
              data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
            }
          }), _mfpOn(MARKUP_PARSE_EVENT + ns, function(dataAndEvents, deepDataAndEvents, $scope, item) {
            var l = mfp.items.length;
            $scope.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : "";
          }), _mfpOn("BuildControls" + ns, function() {
            if (mfp.items.length > 1 && (gSt.arrows && !mfp.arrowLeft)) {
              var markup = gSt.arrowMarkup;
              var arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, "left")).addClass(PREVENT_CLOSE_CLASS);
              var arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, "right")).addClass(PREVENT_CLOSE_CLASS);
              var eName = supportsFastClick ? "mfpFastClick" : "click";
              arrowLeft[eName](function() {
                mfp.prev();
              });
              arrowRight[eName](function() {
                mfp.next();
              });
              if (mfp.isIE7) {
                _getEl("b", arrowLeft[0], false, true);
                _getEl("a", arrowLeft[0], false, true);
                _getEl("b", arrowRight[0], false, true);
                _getEl("a", arrowRight[0], false, true);
              }
              mfp.container.append(arrowLeft.add(arrowRight));
            }
          }), _mfpOn(CHANGE_EVENT + ns, function() {
            if (mfp._preloadTimeout) {
              clearTimeout(mfp._preloadTimeout);
            }
            mfp._preloadTimeout = setTimeout(function() {
              mfp.preloadNearbyImages();
              mfp._preloadTimeout = null;
            }, 16);
          }), _mfpOn(CLOSE_EVENT + ns, function() {
            _document.off(ns);
            mfp.wrap.off("click" + ns);
            if (mfp.arrowLeft) {
              if (supportsFastClick) {
                mfp.arrowLeft.add(mfp.arrowRight).destroyMfpFastClick();
              }
            }
            mfp.arrowRight = mfp.arrowLeft = null;
          }), void 0) : false;
        },
        next : function() {
          mfp.direction = true;
          mfp.index = _getLoopedId(mfp.index + 1);
          mfp.updateItemHTML();
        },
        prev : function() {
          mfp.direction = false;
          mfp.index = _getLoopedId(mfp.index - 1);
          mfp.updateItemHTML();
        },
        goTo : function(newIndex) {
          mfp.direction = newIndex >= mfp.index;
          mfp.index = newIndex;
          mfp.updateItemHTML();
        },
        preloadNearbyImages : function() {
          var i;
          var p = mfp.st.gallery.preload;
          var preloadBefore = Math.min(p[0], mfp.items.length);
          var preloadAfter = Math.min(p[1], mfp.items.length);
          i = 1;
          for (;(mfp.direction ? preloadAfter : preloadBefore) >= i;i++) {
            mfp._preloadItem(mfp.index + i);
          }
          i = 1;
          for (;(mfp.direction ? preloadBefore : preloadAfter) >= i;i++) {
            mfp._preloadItem(mfp.index - i);
          }
        },
        _preloadItem : function(index) {
          if (index = _getLoopedId(index), !mfp.items[index].preloaded) {
            var item = mfp.items[index];
            if (!item.parsed) {
              item = mfp.parseEl(index);
            }
            _mfpTrigger("LazyLoad", item);
            if ("image" === item.type) {
              item.img = $('<img class="mfp-img" />').on("load.mfploader", function() {
                item.hasSize = true;
              }).on("error.mfploader", function() {
                item.hasSize = true;
                item.loadError = true;
                _mfpTrigger("LazyLoadError", item);
              }).attr("src", item.src);
            }
            item.preloaded = true;
          }
        }
      }
    });
    var RETINA_NS = "retina";
    $.magnificPopup.registerModule(RETINA_NS, {
      options : {
        replaceSrc : function(item) {
          return item.src.replace(/\.\w+$/, function(dataAndEvents) {
            return "@2x" + dataAndEvents;
          });
        },
        ratio : 1
      },
      proto : {
        initRetina : function() {
          if (window.devicePixelRatio > 1) {
            var st = mfp.st.retina;
            var ratio = st.ratio;
            ratio = isNaN(ratio) ? ratio() : ratio;
            if (ratio > 1) {
              _mfpOn("ImageHasSize." + RETINA_NS, function(dataAndEvents, item) {
                item.img.css({
                  "max-width" : item.img[0].naturalWidth / ratio,
                  width : "100%"
                });
              });
              _mfpOn("ElementParse." + RETINA_NS, function(dataAndEvents, item) {
                item.src = st.replaceSrc(item, ratio);
              });
            }
          }
        }
      }
    });
    (function() {
      var backoff = 1E3;
      var hasTouch = "ontouchstart" in window;
      var unbindTouchMove = function() {
        _window.off("touchmove" + ns + " touchend" + ns);
      };
      var eName = "mfpFastClick";
      var ns = "." + eName;
      $.fn.mfpFastClick = function(callback) {
        return $(this).each(function() {
          var a;
          var elem = $(this);
          if (hasTouch) {
            var tref;
            var x;
            var y;
            var u;
            var touch;
            var position;
            elem.on("touchstart" + ns, function(e) {
              u = false;
              position = 1;
              touch = e.originalEvent ? e.originalEvent.touches[0] : e.touches[0];
              x = touch.clientX;
              y = touch.clientY;
              _window.on("touchmove" + ns, function(e) {
                touch = e.originalEvent ? e.originalEvent.touches : e.touches;
                position = touch.length;
                touch = touch[0];
                if (Math.abs(touch.clientX - x) > 10 || Math.abs(touch.clientY - y) > 10) {
                  u = true;
                  unbindTouchMove();
                }
              }).on("touchend" + ns, function(types) {
                unbindTouchMove();
                if (!u) {
                  if (!(position > 1)) {
                    a = true;
                    types.preventDefault();
                    clearTimeout(tref);
                    tref = setTimeout(function() {
                      a = false;
                    }, backoff);
                    callback();
                  }
                }
              });
            });
          }
          elem.on("click" + ns, function() {
            if (!a) {
              callback();
            }
          });
        });
      };
      $.fn.destroyMfpFastClick = function() {
        $(this).off("touchstart" + ns + " click" + ns);
        if (hasTouch) {
          _window.off("touchmove" + ns + " touchend" + ns);
        }
      };
    })();
    _checkInstance();
   })(window.jQuery || window.Zepto);